%source {
   char *dbgEventNames[3] = {" eval", "MATCH", "nomatc"};
}

%auxil "struct PreprocessorContext *"
%value "char *"


%header {
   #include "preprocessor-buffering.h"
   #include "preprocessor-config.h"
   #include "macro-definitions.h"
}

line
   <- d:define_line
    / u:undef_line
    / i:include_line
    / comment
    / character* <e:eol> { for(int i = 0; i < strlen($1); i++) {bufferInsert(auxil, $1[i]);}; }
    / eof

character
   <- [^\n] { bufferInsert(auxil, $0[0]); }

define_line
   <- d:define_token blank+ <token> _ eol                                      { defineTextSubMacro(auxil, d, $1); }
    / d:define_token _ eol                                                     { defineTextSubMacro(auxil, d, NULL); }
    / d:define_token blank* "(" m:func_param_list blank* ")" b:func_body eol   { defineFunctionMacro(auxil, d, m, b); }

undef_line
   <- u:undef_token _ eol      { undefineMacro(auxil, u); }

include_line
   <- "#include " blank* "\"" <[^"\""]+> "\"" _ eol { includeFile(auxil, $1); }

define_token
   <- "#define " blank* <token> { $$ = $1; }

func_param_list
   <- <pl:func_param_list> blank* "," blank* <p:func_param> { pl = realloc(pl, strlen(pl) + strlen(p) + 2); strcat(pl, " "); strcat(pl, p); free(p); $$ = pl;}
    / blank* <p:func_param>                                 { $$ = strdup(p); }

func_param
   <- non_comma_character+ { $$ = strdup($0); }

func_body
   <- (!eol .)+ { $$ = $0; }

non_comma_character
   <- (!"," nonspace_nonparen)

undef_token
   <- "#undef " blank* <token> { $$ = $1; }

token
   <- nonspace_nonparen+ { $$ = strdup($0); }



_ 
   <- _*
    / (space / comment)*

comment
   <- '/*' ( !'*/' . )* '*/'
    ## error handling ##
    / '/*' ( !'*/' . )*
    {
      perror("Unclosed comment block!\n");
      abort();
    }
    / '//' (!eol .)* eol


nonspace_nonparen <- (!space !"(" !")" .)

space <- blank / eol
blank <- [ \t\v\f]
eol <- '\r\n' / '\n' / '\r'
eof <- !.
