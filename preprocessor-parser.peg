%source {
   char *dbgEventNames[3] = {" eval", "MATCH", "nomatc"};
}

%auxil "struct PreprocessorContext *"
%value "char *"


%header {
   #include "preprocessor-buffering.h"
   #include "preprocessor-config.h"
   #include "macro-definitions.h"
}

line
   <- define_line eof*
    / undef_line eof*
    / include_line eof*
    / ifdef_line eof*
    / comment eof*
    / character* _ eol* eof*
    / eof

character
   <- (!comment [^\n]) { textBuffer_insert(auxil->inBuf, $0[0]); }

define_line
   <- d:define_token blank+ <token> _ eol                                              { defineTextSubMacro(auxil, d, $1); }
    / d:define_token _ eol                                                             { defineTextSubMacro(auxil, d, ""); }
    / d:define_token blank* "(" m:func_param_list blank* ")" blank* b:func_body _ eol  { defineFunctionMacro(auxil, d, m, b); }

undef_line
   <- u:undef_token _ eol      { undefineMacro(auxil, u); }

include_line
   <- "#include " blank* "\"" <[^"\""]+> "\"" _ eol { includeFile(auxil, $1); }

ifdef_line
   <- "#ifdef " blank* <t:token> _ eol  { enterIfdef(auxil, t, 1); }
    / "#ifndef " blank* <t:token> _ eol { enterIfdef(auxil, t, 0); }
    / "#endif" _ eol                  { exitIfdef(auxil); }

define_token
   <- "#define " blank* <token> { $$ = $1; }

func_param_list
   <- <pl:func_param_list> blank* "," blank* <p:func_param> { pl = realloc(pl, strlen(pl) + strlen(p) + 2); strcat(pl, " "); strcat(pl, p); free(p); $$ = pl;}
    / blank* <p:func_param>                                 { $$ = strdup(p); }

func_param
   <- non_comma_character+ { $$ = strdup($0); }

func_body
   <- (!eol .)+ { $$ = $0; }

non_comma_character
   <- (!"," nonspace_nonparen)

undef_token
   <- "#undef " blank* <token> { $$ = $1; }

token
   <- nonspace_nonparen+ { $$ = $0; }

_ 
   <- _*
    / (space / comment)*

comment
   <- block_comment_opener (non_block_comment_closer* eol*)* block_comment_closer
    ## error handling ##
    / '/*' ( !'*/' . )*
    {
      perror("Unclosed comment block!\n");
      abort();
    }
    / comment_opener non_newline* eol


block_comment_opener <- '/*' { for(int i = 0; i < ($0e - $0s); i++) {textBuffer_insert(auxil->inBuf, ' ');}}
block_comment_closer <- '*/' { for(int i = 0; i < ($0e - $0s); i++) {textBuffer_insert(auxil->inBuf, ' ');}}

non_block_comment_closer
   <- ( !block_comment_closer !eol . ) { for(int i = 0; i < ($0e - $0s); i++) {textBuffer_insert(auxil->inBuf, ' ');}}

comment_opener <- '//'  { for(int i = 0; i < ($0e - $0s); i++) {textBuffer_insert(auxil->inBuf, ' ');}}
non_newline <- (!eol .) { for(int i = 0; i < ($0e - $0s); i++) {textBuffer_insert(auxil->inBuf, ' ');}}


nonspace_nonparen <- (!space !"(" !")" .)

space <- blank / eol
blank <- [ \t\v\f]          { textBuffer_insert(auxil->inBuf, $0[0]); }
eol
   <- eol_silent { textBuffer_insert(auxil->inBuf, '\n'); }

eol_silent
   <- '\r\n'
    / '\n'
    / '\r'


eof <- !.
